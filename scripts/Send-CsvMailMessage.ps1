<##################################################################################
    
    Send-CsvMailMessage

Date            : Wednesday, June 21, 2017
Original Author : pdcdeveloper (https://github.com/pdcdeveloper)
Co-Authors      : 

 
The MIT License (MIT)

Copyright (c) 2016 pdcdeveloper

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


Synopsis:
    Quick script to consume the Send-MailMessage cmdlet.  It looks for a csv
to send as both an attachment and as the body of the email message.


Description:
    


For co-authors:
    Before using, under the Ease of access comment, change the $SERVER variable
to your email provider's smtp server.

    It is recommended to keep your attachment in the same directory as this script.
The $PWD variable is the path to the present working directory and will always be
the directory path that this script is located in.

    The prompt for your credential will populate the username field with the $FROM
variable.  An app password must be generated by your email provider if your email
account is protected with two-factor authentication.


Revisions:

    +20170621
        Outlook's smtp server is the only tested smtp server.



##################################################################################>

# Constants.  Do not modify.
[int]$SMTP_PORT = 587;
[string]$GMAIL_SERVER = "smtp.gmail.com";
[string]$ICLOUD_SERVER = "smtp.mail.me.com";
[string]$OUTLOOK_SERVER = "smtp.outlook.com";

# Ease of access.
[string]$FROM = "email@outlook.com";
[string]$TO = "email@outlook.com";
[string]$SUBJECT_LINE = "Work schedule";
[string]$ATTACHMENT_PATH = "$PWD\B, Bob work schedule.csv";
[string]$SERVER = $OUTLOOK_SERVER;


<##################################################################################
MAIN
##################################################################################>

# Find the attachment and format it for the body.
$attachment = $null;
$body = "";
if (Test-Path $ATTACHMENT_PATH) {
    $body = Import-Csv -LiteralPath $ATTACHMENT_PATH;

    # Format the body.
    $body = $body | Format-Table | Out-String
    $body; # Show
}
else {
    Write-Error -Message "Attachment not found.";
    Read-Host;
    return;
}

# Ask for a user credential.
$credential = Get-Credential -UserName $FROM -Message "Use an app password if your email account is protected by two-factor authentication.";
if (!$credential) {
    Write-Error -Message "Credentials are required.";
    Read-Host;
    return;
}

Write-Host "Sending the attachment...";
Write-Host "FROM: $FROM";
write-Host "TO: $TO";


# Send
Send-MailMessage -From $FROM -To $TO -Subject $SUBJECT_LINE -Attachments $ATTACHMENT_PATH -Body $body -SmtpServer $server -UseSsl -Port $SMTP_PORT -Credential $credential

# Clean-up
Remove-Variable credential;

Read-Host -Prompt "Done.";
